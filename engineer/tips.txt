CELERY:
*Flower - это веб-инструмент для мониторинга и администрирования Celery в режиме реального времени



КОМАНДЫ:
django-admin startproject "НАЗВАНИЕ ПРОЕКТА" - создание проекта
python manage.py createsuperuser-"создание администратора"
python manage.py runserver-запуск сервера (отладочный веб сервер)
python manage.py migrate-создание миграций
python manage.py makemigrations- перенос миграций
python manage.py test - запуск тестов
python manage.py startapp("Name apps")
python manage.py sqlmigrate Site 0001
vim "example.py"-создание нового фвйла
pipenv install django - установка нового виртуального окружения для django
python manage.py createsuperuser - создание суперпользователя
python manage.py shell - запуск БД

PIP:
*pip freeze > requirements.txt - перенос установленных зависимостей в reuirements.txt
*pip freeze requirements.txt — команда, которая позволяет создать текстовый документ,
в котором перечислены все установленные и необходимые для работы Python
приложения программные пакеты.

HOSTS:
*sudo netstat -tulpn | grep LISTEN - просмотр всех работающий портов
*sudo ss -lptn 'sport = :5432' - просмотр порта 5432
*pg_isready -h 127.0.0.1 -p 5432 -U bot  -d bot - тестирование PSQL
*telnet localhost 5432 - подключение к ХОСТУ 5432


SQL:

    SELECT — выбери данные
    FROM — вот отсюда
    JOIN — добавь еще эти таблицы
    WHERE — при таком условии
    GROUP BY — сгруппируй данные по этому признаку
    ORDER BY — отсортируй данные по этому признаку
    LIMIT — нужно такое количество результатов
    ; — конец предложения


DB(Postgres):
*
*python manage.py shell - для работы с БД
*python manage.py shell_plus --print-sql - импорт всех моделей при работе
с shell, получить полезную информацию
*sudo -u postgres psql - для работы с POSTGRESQL
*\c 'название БД' - подключение к БД
*sudo systemctl is-enabled postgresql - проверка включения службы Postgresql
*sudo su - postgres - для работы с Postgresql
*psql - командная оболочка
*pg_config --version - узнать версию Posgresql
*CREATE TABLE 'имя таблицы' (
 );- создать таблицу
*\d test_db - просмотр таблицы БД
*DROP DATABASE - удаление БД
*DROP TABLE 'название таблицы' - удаление таблицы

POSTGRESQL(Create db and user):
1) sudo -u postgres psql - войти в интерактивную строку
2) CREATE DATABASE s_engineer; - создание БД название
3) CREATE USER s_engineer WITH PASSWORD 'password'; - создание
пользователя базы данных и пароля
4) ALTER ROLE s_engineer SET client_encoding TO 'utf8'; - шифрование по умолчанию
нужно установить на UTF-8
5) ALTER ROLE s_engineer SET default_transaction_isolation TO 'read committed'; -
 Схемой изоляции транзакций по умолчанию нужно выбрать read committed,
она блокирует чтение транзакций, по которым не было коммитов
6) ALTER ROLE s_engineer SET timezone TO 'UTC'; - по умолчанию проекты Django
используют UTC (так рекомендует сам проект Django)
7) GRANT ALL PRIVILEGES ON DATABASE myproject TO s_engineer; - предоставление пользователю
 БД права доступа к базе данных

DB(Migrations):
./manage.py showmigrations - выводит список миграций


DOCKER:
Docker — это набор инструментов,
с помощью которого можно создавать,
управлять и запускать приложения в контейнерах.
docker run hello-world - запуск тестового докера
docker build - запуск Dockerfile
docker build -t '' . - сборка образа из корневого каталога "."
docker-compose build — сборка образа из docker-compose.yml
docker-compose down — выключить все запущенные контейнеры из docker-compose.yml
docker-compose exec <container> <command> — позволяет выполнить определенную команду внутри контейнера
docker images list — отображает локальный список образов
docker ps — отображает запущенные контейнеры
docker ps -a - просмотр всех запущенных контейнеров и которые уже закрыты
docker log -f <container> — показывает лог работы контейнера (стандартный вывод)
docker-compose stop <container> — останавливает контейнер
docker stats — отображает статистику потребления ресурсов контейнерами



DOCKER-COMPOSE:
Инструмент, помогающий определять и запускать приложения,
для которых требуются несколько сервисов.
*docker-compose up - запуск Docker - compose


Celery+Redis
порт Redis=6379
pip install celery - устанвока Celery
python -m celery worker - запуск очереди задач
sudo apt install redis - установка Redis для Celery как брокера задач
redis-cli - проверка связи с сервером Redis
python -m pip install redis - установка клиента для взаимодействия с Redis
python -m celery -A "название приложения" worker - запуск Celery
docker run --name my-redis -d redis - запуск редиса в контейнере докер
docker exec -it  my-redis redis-cli - подключение к редису

python manage.py createcachetable - команда для построения таблицы БД


GIT:
git config --global user.name "Your Name" # создание имени
git config --global user.email "yourname@email.com" # создание электронной почты
git log --oneline # упрощенный вид гит логов
git pull
git commit
git push
git remote

1)git init - добавить, инициализировать GIT, создать новый GIT
2)git status - чтоб увидеть изменения
3)git add -A - добавление изменений в git
4)git commit -m 'название коммита' - отслеживание изменений
5)git checkout -b "название ветки" - создание новой ветки
6)git checkout 'название ветки' - переключение на ветку мастера
7)git log - просмотреть коммиты
8)git remote add <repository_name> link - для связывания локального и удаленного репозитория
9)git branch -v - информация о ветке и ок коммите
10)git checkout -b 'название ветки' = branch + checkout
11)git stash - собирает незакомиченные изменения и собирает в архив
12)git config --list - просмотр параметров конфигурации
13)git config -h - вывод опций конфига

REDIS:
1) redis-server - ЗАПУСК СЕРВЕРА
2) redis-cli - ПРОВЕРКА СОЕДИНЕНИЯ
127.0.0.1:6379> ping # ввод слова ping и получение ответа PONG
python -m pip install redis - предоставление подключения Python к Redis

TESTS:
1) ./manage.py test hair.tests - запуск тестов(пример команды)
2) ./manage.py test systems.tests


LINUX КОМАНДЫ:
1) ls - просмотр содержимого директории
2) pwd - просмотр пути директории
3) mkdir - создание директории
4) cd .. - переход на уровень выше по директории
5) cd название каталог - переход к опреденной директории
6) cp - копирование из одного каталога в другой (пример "cd dir1/dir2") - копирование из dir1 в dir2
7) rm название файла или директории - удаление
8) mv("move") - перемещение файла или директории
9) cp -r - скопировать директорию
10) cat - прочитать содержимое файла
11) df -h - просмотр разделов
12) cat /proc/meminfo - просмотр размера ОЗУ
13) top - запущенные задачи
14) touch 'название файла'- создание файла

Работа с ядрами Linux:
1) sudo uname -a - установленное актуальное ядро системы
2) apt list --installed | egrep "linux-image|linux-headers" - какие версии установлены
3) dpkg --list | egrep "linux-image|linux-headers" - какие ядра установлены

            Назначение папок
• admin.py файл конфигурации для встроенного приложения администратора Django
• apps.py является конфигурационным файлом для самого приложения
• migrations отслеживает любые изменения в файле models.py чтобы синхронизировать
нашу базу данных с models.py
• models.py тут мы определяем наши модели базы данных, которые Django
автоматически переводит в таблицы базы данных
• tests.py предназначен для тестирования приложений
migration - хранение миграций, для описания структуры БД
отслеживает любые изменения в файле models.py чтобы синхронизировать
нашу базу данных с models.py

unit-описать функционал

admin.py-отображает файлы для панели администратора
файл конфигурации для встроенного приложения администратора Django

apps.py-глобальные настройки приложения
является конфигурационным файлом для самого приложения

model.py-модуль создание класса на основе которого создается табличка в БД
тут мы определяем наши модели базы данных, которые Django
автоматически переводит в таблицы базы данных

test.py-модуль для тестирования приложения (UNIT тесты)

views.py-модуль для хранения представлений "методы" при переходе пользователя на определенную страницу(Отслеживание через urls.py)
тут мы обрабатываем логику запроса / ответа для нашего веб-
приложения


ФАЙЛЫ:
manage.py - файл для запуска локального сервера, для создания миграций
Программный файл с кодом одноименной служебной утилиты, выполняющей различные действия над проектом
используется для выполнения различных команд
Django, таких как запуск локального веб-сервера или создание нового приложения.

unit.py-характеристики сайта
пустой файл, сообщающий Python, что папка, в которой он находится, является полноценным пакетом;

wsgi, asgi-стандарт для обеспечения подключения (код не меняется), стандарт взаимодействия между Python прораммой,
выполняющийся на стороне сервера и самим веб сервером
Протоколы взаимодействия с сервером
Модули wsgi.py и asgi.py используются при публикации готового сайта в Интернете

setting.py -глобальные настройки
Модуль с настройками самого проекта. Включает описание конфигурации базы данных проекта, пути ключевых папок, важные параметры,
связанные с безопасностью, и пр.;
    BASE DIR- полный путь к нашему проекту, для загрузки на сервер
    SECRET KEY-секретный ключ приложения("нельзя показывать")
    DEBUG-показ ошибок при загрузке сайта("Значение: True, False")
    ALLOWED_HOST-хосты на которых разрешены публикация сайтов(Значение:)
    INSTALLED_APPS-набор прилрожений со встроенными приложениями, регистрация приложения
    MIDDLEWARE-установленные плагины
    ROOT_URLCONF -какой файл urls.py будет использоваться для проекта(Значение:Rushan.urls.py)
    TEMPLATES -какие шаблоны используются внутри проекта
    DATABASE-указывается с какой бд мы работаем

urls.py-отслеживание URL адресов и сообщает Django какие
страницы для сборки выдать в ответ на запрос браузера


ФАЙЛЫ ПРИЛОЖЕНИЯ


ПАПКИ:
templates-для хранения HTML файлов
migrations-служит для создания БД
static - для хранения CSS, JS, IMG

            Работа с проектом
pip install Django - установка проекта Django
python django-admin startproject 'азвание проекта' - установка проекта
python3 manage.py startapp 'название приложения'
sudo rm -rf <название виртуального окружения> - удалить виртуальное окружение

            Шаблонизатор Jinja
{% block content %}
{% endblock %}
{% include 'layout.html' %} -

        Горячие клавиши
alt+ctrl+L - РЕФОРМАТ КОДА

        Команды консоли
• cd (изменить каталог)
• cd .. (перейти в верх)
• ls (список файлов в текущем каталоге)
• pwd ( вывести текущий каталог)
• mkdir (создать каталог)
• touch (создать новый файл)


        КОДЫ
100-199 - информационные
200-299 - успешно
300-399 - перенаправление
400-499 - недоступность, ошибка сайта
500-599 - ошибка на стороне сервера


